import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Define the functions with varying a, b, c, (d) constants
def magnus_formula(T:float, a:float, b:float, c:float)->float:
    return a * np.exp((b * T) / (c + T))

# https://www.weather.gov/media/epz/wxcalc/vaporPressure.pdf
# Uses 10^x rather than e^x !!!
def saturation_vapor_pressure(T_celsius):
    """Calculate saturation vapor pressure in Pa
    T_celsius: temperature in °C"""
    return 611 * 10**((7.5 * T_celsius) / (237.3 + T_celsius))

def iso13788(T:float)->float:
    if T<=0.85014:
        return magnus_formula(T, 610.5, 21.875, 265.5) # Mentioned in Arden-buck for freezing temp with large error
    if T<0.84089:
        return 47.18862*T + 609.18998
    return magnus_formula(T, 610.5, 17.269, 237.3)

def arden_buck(T,a=611.21,b=18.678,c=257.14,d=234.5):
    return a * np.exp ((b-(T/d))*(T/(c+T)))

def arden_buck2(T):
    if (T<0):
        return arden_buck(T, 611.15, 23.036, 279.82, 333.7)
    else:
        return arden_buck(T, 611.21, 18.564, 255.57, 254.4)

# Create a map of label to functions with specific a, b values
datasets = {
    "Magnus (610.5, 17.27, 237.3), PSY74": lambda T: magnus_formula(T, 610.5, 17.27, 237.7),
    "Magnus (611.2, 17.62, 242.2), SON90": lambda T: magnus_formula(T, 611.2, 17.62, 242.2),
    "Magnus (611.2, 17.67, 243.5), NOAA":  lambda T: magnus_formula(T, 611.2, 17.67, 243.5),
    "Alternative magnus, weather.gov": saturation_vapor_pressure,
    "Arden Buck (611.21, 18.678, 257.14, 234.5), Wiki": lambda T: arden_buck(T),
    "Arden Buck dual": arden_buck2,
    "ČSN EN ISO 13788": iso13788,
}

# Define the temperature range (outdoor conditions)
temperatures = np.linspace(-25, 40, (40+25)*2+1)

# Calculate results and store in a DataFrame
data = {"Temperature (°C)": temperatures}
for label, func in datasets.items():
    data[label] = [func(T) for T in temperatures]

df = pd.DataFrame(data)

# Export DataFrame for further use (optional)
df.to_csv("saturation_vapor_pressure.csv", index=False)

# Melt the DataFrame for Seaborn-friendly format
df_melted = df.melt(id_vars=["Temperature (°C)"], var_name="Formula", value_name="Saturation Vapor Pressure (Pa)")

# Plot using seaborn
sns.set_theme(style="darkgrid")
fig = plt.figure(figsize=(38.4, 21.6))
sns.lineplot(data=df_melted, x="Temperature (°C)", y="Saturation Vapor Pressure (Pa)", hue="Formula")
plt.title("Saturation Vapor Pressure: Comparison of Formulas")
fig.savefig("saturated_vapor_pressure.png")
plt.show()

###########################

with open("saturation_table.py", "w") as f:
    temperatures = np.linspace(-40, 100, (100+40)*2+1)
    f.write("# This file is automatically generated\n\n")
    f.write("# Table of temperature (°C) and saturation pressure (Pa) pairs\n")
    f.write("saturation_table = [\n")
    for t in temperatures:
        f.write(f"    ({t:5.1f}, {arden_buck2(t):7.1f}),\n")
    f.write("]\n")
        
